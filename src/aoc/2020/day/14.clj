(ns aoc.2020.day.14
  (:require [clojure.string :as s]
            [debux.core :as d]))

(defn float-bits [s] (->> (seq s)
                          (reverse)
                          (map-indexed vector)
                          (filter (comp #{\X} second))
                          (map first)))

(defn parse [input]
  (let [ls (s/split-lines input)
        or-mask (fn [s] (Long/parseLong (s/replace s #"X" "0")
                                        2))
        and-mask (fn [s] (Long/parseLong (s/replace s #"X" "1")
                                         2))
        parse-mask-instr (fn [[_ _ mask]]
                           {:instr :mask
                            :or-mask (or-mask mask)
                            :and-mask (and-mask mask)
                            :float-bits (float-bits mask)})
        parse-mem-instr (fn [[instr _ val]]
                          (let [[_ s _] (s/split instr #"[\[\]]")
                                reg (Integer/parseInt s)
                                val (Long/parseLong val)]
                            {:instr :set
                             :reg reg
                             :val val}))
        parse-line (fn [line]
                     (let [[instr :as args] (s/split line #" ")]
                       (if (= instr "mask")
                         (parse-mask-instr args)
                         (parse-mem-instr args))))]

    (map parse-line ls)))

(def input (parse "mask = X101011X011X10101011000001X00XX0X000\nmem[60126] = 9674686\nmem[39254] = 523988\nmem[54849] = 40771927\nmem[29690] = 10110\nmem[10782] = 975308\nmem[43128] = 4347\nmask = 1X0X00101111100010100X001010XX0X0XXX\nmem[60704] = 43881206\nmem[63842] = 12369309\nmem[45876] = 33941457\nmem[7001] = 347\nmem[57168] = 5484326\nmem[9010] = 1526598\nmask = XX0X0111X1101X1X101X110001100X101X00\nmem[64667] = 9335\nmem[557] = 103838228\nmask = 01110111011110X0101X110000100X10100X\nmem[37083] = 252803732\nmem[38441] = 264510\nmem[10471] = 6258763\nmem[6599] = 7469003\nmem[31917] = 4440673\nmask = X011X01000X110X1X00X0100X0X000100011\nmem[34590] = 1012\nmem[45359] = 8432\nmem[3178] = 33474\nmem[3722] = 3556\nmem[49428] = 9026812\nmem[10938] = 35041698\nmask = 01X1X11X011X1X0X11X0100X11101X010011\nmem[42766] = 6617\nmem[49563] = 960913\nmem[47263] = 269\nmem[31711] = 43288638\nmem[41482] = 64610360\nmem[16665] = 600\nmem[32730] = 37650\nmask = 00XX0X101111XXX1101X0X0X001000101100\nmem[34707] = 40982522\nmem[9182] = 545101093\nmem[46509] = 44467432\nmem[14087] = 1863\nmem[40214] = 126903285\nmem[60120] = 56379991\nmask = 01XX10110110100010X100X0X10111100000\nmem[30183] = 134656354\nmem[49417] = 78985543\nmem[14770] = 18142096\nmem[61486] = 39482\nmem[52941] = 98022933\nmem[46433] = 952154\nmask = 00010X10X1110010101001011001X100X101\nmem[20851] = 938875\nmem[42517] = 2746639\nmem[18095] = 623480\nmem[45359] = 554\nmem[52625] = 9537360\nmem[3178] = 634749644\nmem[11612] = 1338\nmask = 01000X1X111XX110101X10000X0XX11011X1\nmem[33690] = 133806\nmem[11082] = 47091974\nmem[18025] = 716988\nmem[1627] = 3080902\nmask = 010101X1111XX11010X00000XX11XX0X0010\nmem[1839] = 55761\nmem[34016] = 19521\nmem[32399] = 2550\nmem[56670] = 486944499\nmask = 0100101101110XX01011X100101111X10011\nmem[57556] = 1980\nmem[15099] = 1000\nmem[2248] = 11713417\nmask = 0X0X011X1111X110101X0000001000101X00\nmem[28478] = 2335\nmem[49509] = 262\nmem[18296] = 16275\nmem[3851] = 228035\nmem[30877] = 53163521\nmask = 000X01X010100X1010101101100000X0X100\nmem[38075] = 79529\nmem[42738] = 45415\nmem[24109] = 1567958\nmem[17143] = 93137\nmem[45101] = 814797986\nmask = XX01XX1X011X10X0101011000000010000X1\nmem[1576] = 443528583\nmem[36865] = 148\nmem[46509] = 482\nmem[62388] = 15\nmem[63623] = 539909442\nmem[41370] = 128\nmem[44715] = 22308\nmask = 11011X1000101X00XXX001X110X00100010X\nmem[35152] = 34820483\nmem[16033] = 65763\nmem[1882] = 1027800\nmask = 00010X10111110X0X010X0110010X01X1X01\nmem[59815] = 2490477\nmem[49157] = 6507122\nmem[30800] = 590164239\nmem[59044] = 165654579\nmask = 01010X1111111X101010011X0011X0001011\nmem[10137] = 228\nmem[2311] = 13276802\nmask = XX01X1X101101010101100001X000010000X\nmem[34583] = 1655642\nmem[11286] = 132679008\nmem[22109] = 157717238\nmask = 0001001011111X1X0X101XX11X1X101100X1\nmem[57742] = 26691\nmem[6874] = 10458032\nmem[53037] = 2388387\nmem[12331] = 5770\nmem[51728] = 2135\nmem[9580] = 487489805\nmask = 01001X11011110X0X0X01X1100000111XXX1\nmem[53769] = 55803305\nmem[56229] = 24695063\nmem[19171] = 48736390\nmem[64782] = 735\nmem[3081] = 280948\nmem[57365] = 846847157\nmask = 0X000110X1X11X1X10111000X010000XXX00\nmem[61422] = 1126\nmem[22207] = 67628317\nmem[9539] = 61546790\nmem[1131] = 130904490\nmem[52684] = 8379637\nmem[24366] = 383662099\nmask = 010X1111011X1000X0X11X101X00101X1010\nmem[18109] = 6735\nmem[32797] = 531499843\nmem[53585] = 432\nmask = 100000X0111X100X1XX000X0101100110000\nmem[7943] = 196928\nmem[22176] = 12548\nmem[30990] = 446363\nmem[160] = 22025\nmem[4615] = 566343\nmask = 0X11011101X1X0011X011101111101001001\nmem[39520] = 714461\nmem[45101] = 3821808\nmem[62323] = 6386948\nmask = 01X0110X01XX100010110010011001000X01\nmem[37344] = 447\nmem[3023] = 855524337\nmem[23128] = 112513310\nmem[6564] = 11\nmask = 0100X01XX111XX1X10111100001110001X10\nmem[62178] = 63123\nmem[55172] = 153103\nmem[51929] = 181344\nmem[34661] = 1972\nmem[54999] = 1068\nmem[59358] = 992\nmask = 1001011XX0111XX010100X0001001X11X0X0\nmem[41893] = 479\nmem[6599] = 1981844\nmem[46760] = 216449\nmem[50221] = 811\nmask = X0X10010111X101001100X01X01X11101X10\nmem[25689] = 136\nmem[10938] = 28382\nmem[16643] = 197364\nmem[51281] = 617\nmem[16153] = 3676\nmem[26490] = 384\nmask = 010001X00X11100011100010111010X010X0\nmem[64133] = 208\nmem[24062] = 903539668\nmem[36044] = 2001\nmem[23144] = 1011029\nmem[22716] = 11499\nmem[59581] = 17899405\nmem[26171] = 111934167\nmask = 010010110X101000101XXX00000111001101\nmem[43291] = 3112\nmem[19446] = 5600478\nmem[62398] = 341768545\nmem[30567] = 465047\nmem[38317] = 22125824\nmask = 00X101101111101000X011X1X00X10X0X101\nmem[53713] = 409555\nmem[55388] = 65118\nmem[54952] = 133834612\nmem[25132] = 42713528\nmem[16165] = 2107530\nmask = 101101111111101100X0X111X1000X101X1X\nmem[46469] = 6516\nmem[58152] = 331216697\nmem[1931] = 23454\nmem[63623] = 304198968\nmem[5559] = 32986355\nmask = 0X0111XX01111X00101X10000X10010010X1\nmem[54268] = 619\nmem[50248] = 882\nmem[12816] = 850402\nmask = 010X0110011X100X1X10X1101X1XX0X11101\nmem[37158] = 8631\nmem[5913] = 1852245\nmem[39724] = 809871\nmem[27706] = 2649386\nmem[53037] = 187717225\nmask = 00011X110110101010X0X11100X11X1X1000\nmem[22063] = 97071\nmem[62330] = 777\nmem[13645] = 8634786\nmask = 0XXXX111011110X0101X100X010001X0X000\nmem[3609] = 1585\nmem[55533] = 3654\nmem[46561] = 27985772\nmem[49761] = 1723550\nmem[9580] = 123963\nmem[30529] = 15486580\nmask = 01011111011X101X1011100X001101100X00\nmem[386] = 5196729\nmem[26441] = 930769\nmem[51597] = 160686\nmem[34426] = 89786878\nmem[7046] = 1642552\nmem[58359] = 19998\nmask = X01110X1X11X1X0X100110XXX11101000011\nmem[52684] = 413134467\nmem[41057] = 237240996\nmem[4615] = 1050604472\nmem[37298] = 464\nmem[10624] = 166667\nmem[51214] = 189464\nmask = 0011111101X01000101111XXX101X1101001\nmem[57892] = 4128\nmem[23904] = 1230477\nmem[37354] = 295321\nmem[9213] = 18002\nmem[19975] = 93077192\nmask = 1101011101X01111100010XX01X001000010\nmem[9629] = 585\nmem[14618] = 414\nmem[46327] = 110854046\nmem[24296] = 101\nmem[15485] = 3005564\nmask = X001XX1X0010X010101X1101100011000X01\nmem[41309] = 445635\nmem[48838] = 55661\nmem[46592] = 765710\nmem[18993] = 4196275\nmask = 10010011X0100010X0100X01000X10001001\nmem[56025] = 1496\nmem[41771] = 3244\nmem[19132] = 888\nmem[65367] = 208629904\nmem[59728] = 9087603\nmask = 0101X1X0011010011X1001X111111XX11X01\nmem[58407] = 87107553\nmem[28815] = 68182\nmem[28313] = 2239\nmem[39552] = 101470\nmask = 0111011101101X01X001001111010111XXXX\nmem[8813] = 400372\nmem[45602] = 32028274\nmem[24857] = 114\nmem[61754] = 95\nmem[30298] = 580278\nmask = 11011X110X1010X010X001010X0XX10X0011\nmem[55] = 1059\nmem[52684] = 56819312\nmem[51597] = 2017\nmem[39454] = 931156481\nmem[62166] = 62175870\nmem[36867] = 470\nmem[47415] = 1746\nmask = 11010010XX1X10X0101XX1X001000110000X\nmem[1579] = 483360842\nmem[28054] = 6824\nmem[2134] = 7557\nmem[47741] = 701257\nmem[51788] = 731562\nmem[61220] = 6536939\nmem[46561] = 882\nmask = 010X0110X110X11010101X0X011101001001\nmem[34992] = 709195313\nmem[629] = 47845214\nmem[5317] = 14225\nmem[12844] = 723\nmem[41998] = 7106433\nmem[9010] = 425846\nmask = XX11111101111010X0XX1010010X10100XX1\nmem[4161] = 30022\nmem[47290] = 14778\nmem[46760] = 483\nmem[42376] = 1286\nmem[9346] = 8742\nmask = 1101001011X1100010XX11011X0001010X00\nmem[5481] = 17524\nmem[45359] = 5898\nmem[34562] = 1689874\nmem[23144] = 250958525\nmem[55571] = 7375458\nmem[38757] = 370\nmask = 01010X101111X1X01011010000010001100X\nmem[17410] = 85534302\nmem[12631] = 253750\nmem[61106] = 613785883\nmem[18024] = 34275\nmem[48546] = 680\nmem[41751] = 140\nmask = 1X01X010X01010X0101X10011X0001010100\nmem[20073] = 8549591\nmem[28358] = 12445\nmem[49845] = 8275\nmem[23873] = 20426966\nmem[18109] = 378612521\nmem[55852] = 52955029\nmask = X10101110XX0111110XX100X011001101X00\nmem[16969] = 474\nmem[28358] = 2430\nmem[34229] = 51117\nmask = 01101111011110XX1X10X0010X01000X1000\nmem[20344] = 4618\nmem[45257] = 226807155\nmem[61651] = 2271\nmask = 01XXX1X00110100X10X0111100X100101101\nmem[43924] = 1467\nmem[34016] = 15\nmem[35565] = 97087604\nmem[28171] = 595\nmem[65534] = 4049200\nmask = 100000101111100XX0100000101000001X0X\nmem[5481] = 1424699\nmem[27180] = 36197\nmem[34669] = 131477593\nmem[8450] = 37506\nmem[4928] = 11393\nmask = 01110111011110001X11010010111XX010X0\nmem[18923] = 17613\nmem[55846] = 20954445\nmem[39254] = 51926728\nmem[38075] = 130\nmem[15418] = 44585145\nmask = X00101101111X0101010001X1X01000001X1\nmem[35199] = 312510765\nmem[62398] = 999656\nmem[55533] = 37897408\nmem[5648] = 1036966443\nmask = 010011110111101XXX1011101000011X1000\nmem[19738] = 151629\nmem[56289] = 189790\nmem[35953] = 15255399\nmem[52671] = 396\nmem[11845] = 993740\nmask = 1101001000111X1X101XX100010001001001\nmem[34411] = 295\nmem[56671] = 2362723\nmask = 1101XX110X10XX1X10101100000001011100\nmem[7337] = 8237094\nmem[7031] = 118473\nmem[39047] = 2581731\nmem[51238] = 451786815\nmem[18409] = 243\nmask = X00101101X10X0101X10011X10X000101000\nmem[46760] = 244623\nmem[40204] = 3603820\nmem[52129] = 3506\nmem[16653] = 21230148\nmem[41485] = 33094\nmem[60015] = 107\nmask = X101011001111000101X0X111000X0X00X0X\nmem[42738] = 3889911\nmem[61025] = 3996\nmem[30822] = 319759319\nmem[53445] = 6639088\nmem[29654] = 4338\nmem[21504] = 57158603\nmask = X0111111XX11X000101101X1101001100001\nmem[5225] = 6975\nmem[30877] = 1878\nmem[46079] = 1189855\nmem[19002] = 3809\nmem[18908] = 28205\nmem[42747] = 159071873\nmem[19144] = 899748\nmask = 0101X1110100111X0XX1X1001X1001100000\nmem[34377] = 5331828\nmem[52109] = 3671\nmem[9629] = 10211687\nmask = 0101X100XX10X00X111X000111X11X1X0001\nmem[62093] = 4555750\nmem[22728] = 1902\nmem[25369] = 21501187\nmem[38470] = 1713\nmem[18034] = 9033\nmask = X0X101111111X0X1X01011100100000X1110\nmem[16231] = 25595\nmem[7337] = 64222006\nmem[38717] = 17998107\nmem[17143] = 56331\nmem[3851] = 17\nmem[36652] = 810070\nmask = 1X00X11111X011101X1111110110X0110010\nmem[40873] = 245915859\nmem[38090] = 328774\nmem[45602] = 361242\nmem[40307] = 189025934\nmem[55533] = 902335450\nmem[48681] = 3398403\nmask = 0X011111011010111XX1100001X100001000\nmem[27200] = 7180\nmem[41393] = 197862524\nmem[35565] = 6433\nmask = 00111X1X011X100X10X10X0010100X100000\nmem[22127] = 2039\nmem[49761] = 2974\nmem[32236] = 133316\nmem[36465] = 233114\nmask = 1X0101111X11101X10100100011100001X01\nmem[61195] = 12674536\nmem[16732] = 11908077\nmem[5648] = 46490\nmem[15994] = 87271\nmem[34229] = 53000\nmem[22063] = 966438\nmem[59044] = 1966845\nmask = 0X01X11101X01X1XXX111000X11001101001\nmem[16961] = 3007244\nmem[24296] = 229759353\nmem[5240] = 248972\nmem[33165] = 870504\nmask = 110X11110110101X1000X1110100XX0X0111\nmem[43104] = 394289736\nmem[50640] = 8371\nmem[19002] = 22263052\nmask = X00X01X0X01X10001X1X1010010110X11001\nmem[52725] = 3596\nmem[1830] = 852\nmem[17859] = 5145419\nmem[24109] = 3266\nmask = 01001XX1011X1000X0X100X000X11100XX01\nmem[2939] = 21652\nmem[31549] = 6146\nmem[46081] = 89954225\nmem[56499] = 566\nmem[46561] = 523763\nmask = 001X001X111X011110X1X11XX1X01X101100\nmem[9682] = 1883\nmem[24602] = 937546207\nmem[24588] = 2933\nmem[11845] = 7846310\nmem[33451] = 177708\nmem[25861] = 52153\nmem[60126] = 6178305\nmask = 0100001011111X1110XXX1X0000001101010\nmem[32925] = 124064771\nmem[47229] = 470344\nmem[19578] = 14298\nmem[5024] = 281\nmem[34016] = 4572362\nmask = XX01X1X1011010111011X1111X1011011011\nmem[41309] = 6227\nmem[23647] = 137\nmem[17469] = 322208\nmem[55172] = 193476\nmem[65367] = 98630465\nmem[23822] = 127119\nmask = 0101011001111X00X010X0011110X1100101\nmem[59963] = 124947188\nmem[42597] = 1283704\nmem[18482] = 7915\nmem[47413] = 471406\nmem[43629] = 128188581\nmem[63257] = 228254709\nmask = 0X11X111011X100X10X10X0111X001101XX1\nmem[55436] = 131315318\nmem[24551] = 243\nmem[4711] = 2883\nmem[48157] = 2508\nmem[37030] = 21555\nmem[34562] = 1589005\nmem[11550] = 5293\nmask = 0X01011001111X0011100000X10000101X01\nmem[14335] = 3968288\nmem[44150] = 10819878\nmem[29244] = 165332\nmask = 01110111011110X01011X10X1X0110101110\nmem[59329] = 39829777\nmem[34766] = 196214\nmem[39624] = 6080817\nmem[28054] = 6964\nmask = 10010X1011111X001X1X1010101100100X01\nmem[37665] = 326246393\nmem[43120] = 10019762\nmask = 000101XX10111X10101X0100001X1X001X01\nmem[51388] = 2236803\nmem[18177] = 14993\nmem[61543] = 16001841\nmem[56229] = 342151958\nmask = 0011101XXX111001X001100X111X001X0X01\nmem[63605] = 1204\nmem[56106] = 24425\nmem[8823] = 624\nmem[33297] = 24751311\nmask = 1101001011XX10101X100X10110011X10X00\nmem[1528] = 367894\nmem[51697] = 8167\nmem[20699] = 149242307\nmem[40307] = 3205\nmem[10690] = 961\nmem[54699] = 10574\nmem[57137] = 731\nmask = 0X0101001011X1X0101X0000101010101000\nmem[53249] = 23260\nmem[59520] = 75723443\nmem[17105] = 115182\nmem[30275] = 6131848\nmem[3023] = 400948\nmask = 110X101X101010101011X10XX000X100X0X1\nmem[11133] = 20188322\nmem[21781] = 56747\nmem[8420] = 22379\nmask = 0100X11101111010101000X010X0001X1X0X\nmem[36172] = 53\nmem[8450] = 3013\nmem[37952] = 3403\nmem[16191] = 81318477\nmem[13470] = 240413938\nmask = 0100X11101111000000X10X00101011X0111\nmem[40021] = 57554\nmem[64773] = 3803\nmask = X001011X1X1X1010101011X0XXXX00101100\nmem[41393] = 9033\nmem[9481] = 966953\nmask = 0100X1X101111000101101X00110010X1000\nmem[58752] = 26939\nmem[33793] = 109959\nmem[22716] = 107238\nmask = 1X11X01X0X01100100X101000X00X011X0X0\nmem[33454] = 9482389\nmem[10379] = 2432\nmem[57658] = 265\nmem[40140] = 130152807\nmask = 01X111100110100X100010010X0110011X0X\nmem[27458] = 80396810\nmem[37241] = 175138597\nmem[12313] = 65106019\nmem[27189] = 5555493\nmem[15622] = 7712357\nmask = X10111110X101X101X110X00X11000101X01\nmem[26165] = 623840421\nmem[49256] = 9368652\nmem[14770] = 544947\nmem[31629] = 13938\nmask = 000100101111111X011011010X1X101100X1\nmem[56248] = 21501\nmem[51232] = 61595\nmask = 10111001111111XX100X1001110101000X11\nmem[29008] = 440\nmem[29652] = 270482\nmem[38470] = 495\nmem[33132] = 1675\nmem[17078] = 5234\nmem[5001] = 2458\nmask = 1X000010111110X010XX0X00X010X00X00X0\nmem[30147] = 497416\nmem[31711] = 353388\nmem[5024] = 51391\nmem[42787] = 48397\nmem[8066] = 54115\nmem[27040] = 754\nmask = 0X11111X01X01X0110000101010101100001\nmem[55892] = 24149471\nmem[42124] = 178547303\nmask = X1010101X111X1XX10X01000101X0010XX00\nmem[36025] = 95\nmem[30529] = 881\nmem[64696] = 210812\nmem[60217] = 4509\nmem[37727] = 14972\nmem[3394] = 1633"))

(def t (parse "mask = XXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXX0X\nmem[8] = 11\nmem[7] = 101\nmem[8] = 0"))

(def t' (parse "mask = 000000000000000000000000000000X1001X\nmem[42] = 100\nmask = 00000000000000000000000000000000X0XX\nmem[26] = 1"))

(def init-state {:and-mask nil
                 :or-mask nil
                 :float-bits nil
                 :mem {}})

(defn mask [state statement]
  (into state (select-keys statement [:and-mask :or-mask :float-bits])))

(defn set-mem [state statement]
  (assoc-in state
            [:mem (:reg statement)]
            (->> (:val statement)
                 (bit-and (:and-mask state))
                 (bit-or (:or-mask state)))))

(defn regs
  ([reg or-mask float-bits]
   (let [reg (bit-or or-mask reg)]
     (regs reg float-bits)))
  ([reg [bit & more]]
   (if (nil? bit)
     [reg]
     (mapcat #(vector (bit-set % bit) (bit-clear % bit))
             (regs reg more)))))

(defn set-mem' [{:keys [or-mask float-bits mem] :as state}
                {:keys [reg val]}]
  (let [regs (regs reg or-mask float-bits)
        mem' (into mem (map #(vector % val)
                            regs))]
    (assoc state :mem mem')))


(defn run-cycle [state {:keys [instr] :as statement}]
  (case instr
    :mask (mask state statement)
    :set (set-mem state statement)))

(defn run-cycle' [state {:keys [instr] :as statement}]
  (case instr
    :mask (mask state statement)
    :set (set-mem' state statement)))

;; A
(->> input
     (reduce run-cycle init-state)
     :mem
     (vals)
     (apply +))

;; B
(->> input
     (reduce run-cycle' init-state)
     :mem
     (vals)
     (apply +))





